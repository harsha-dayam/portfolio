{
  "_args": [
    [
      {
        "raw": "grunt-respimg",
        "scope": null,
        "escapedName": "grunt-respimg",
        "name": "grunt-respimg",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/harshadayam/Documents/Udacity/Project 2-Portfolio/Portfolio"
    ]
  ],
  "_from": "grunt-respimg@latest",
  "_id": "grunt-respimg@1.1.0",
  "_inCache": true,
  "_location": "/grunt-respimg",
  "_nodeVersion": "0.10.38",
  "_npmUser": {
    "name": "nwtn",
    "email": "david@davidnewton.ca"
  },
  "_npmVersion": "2.8.4",
  "_phantomChildren": {
    "abbrev": "1.1.0",
    "eventemitter2": "0.4.14",
    "exit": "0.1.2",
    "getobject": "0.1.0",
    "hooker": "0.2.3",
    "inherits": "2.0.3",
    "lru-cache": "2.7.3",
    "rimraf": "2.2.8",
    "sigmund": "1.0.1",
    "underscore": "1.7.0"
  },
  "_requested": {
    "raw": "grunt-respimg",
    "scope": null,
    "escapedName": "grunt-respimg",
    "name": "grunt-respimg",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-respimg/-/grunt-respimg-1.1.0.tgz",
  "_shasum": "2c4d0a29645ecfefc0206e6d356a3ac320205f08",
  "_shrinkwrap": null,
  "_spec": "grunt-respimg",
  "_where": "/Users/harshadayam/Documents/Udacity/Project 2-Portfolio/Portfolio",
  "author": {
    "name": "David Newton",
    "email": "david@davidnewton.ca",
    "url": "http://twitter.com/newtron/"
  },
  "bugs": {
    "url": "https://github.com/nwtn/grunt-respimg/issues"
  },
  "dependencies": {
    "async": "~0.2.8",
    "each-async": "^1.0.0",
    "fs-extra": "^0.18.2",
    "grunt": "^0.4.5",
    "imageoptim-cli": ">= 1.6.19",
    "node-imagemagick": "~0.1.8",
    "phantomjs": "~1.9.0",
    "pretty-bytes": "^1.0.1",
    "q": "~0.9.7",
    "svgo": "^0.5.0"
  },
  "description": "A responsive image workflow for optimizing and resizing your images",
  "devDependencies": {
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt-simple-mocha": "^0.4.0",
    "node-resemble": "^1.1.3",
    "pngjs": "~0.4.0",
    "resemble": "^1.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "2c4d0a29645ecfefc0206e6d356a3ac320205f08",
    "tarball": "https://registry.npmjs.org/grunt-respimg/-/grunt-respimg-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "gitHead": "0f3a95d68737d63ac9ff062b2bf83f8d610b3bea",
  "homepage": "https://github.com/nwtn/grunt-respimg",
  "keywords": [
    "advpng",
    "build",
    "compress",
    "compression",
    "gifsicle",
    "graphic",
    "graphicsmagick",
    "grunt",
    "gruntjs",
    "gruntplugin",
    "image",
    "imagemagick",
    "ImageOptim",
    "images",
    "img",
    "JPEGmini",
    "jpegoptim",
    "jpegtran",
    "minify",
    "optimization",
    "optimize",
    "optipng",
    "phantom",
    "phantomjs",
    "picturefill",
    "png",
    "pngcrush",
    "pngout",
    "rasterise",
    "rasterize",
    "respimg",
    "responsive",
    "responsivedesign",
    "rwd",
    "srcset",
    "svg",
    "vector"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nwtn/grunt-respimg/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "nwtn",
      "email": "david@davidnewton.ca"
    }
  ],
  "name": "grunt-respimg",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": "^0.4.5"
  },
  "readme": "# grunt-respimg\n\n**A responsive image workflow for optimizing and resizing your images.**\n\nThis plugin will:\n\n* Efficiently resize PNGs, JPEGs, and non-animated GIFs to widths that you specify\n* Rasterize SVGs and PDFs to PNGs at widths that you specify\n* Optimize all your input and output images (PNGs, JPEGs, GIFs, and SVGs)\n\nThe output images should be visually indistinguishable from those output by Photoshop’s *Save for Web…*, but with (much) smaller average file sizes.\n\nThis plugin is heavily indebted to (and has portions borrowed liberally from):\n\n* [grunt-responsive-images](https://github.com/andismith/grunt-responsive-images),\n* [grunt-svg2png](https://github.com/dbushell/grunt-svg2png),\n* [grunt-imageoptim](https://github.com/JamieMason/grunt-imageoptim), and\n* [grunt-svgmin](https://github.com/sindresorhus/grunt-svgmin)\n\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.5`.\n\nIf you haven’t used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n### Installing ImageMagick\n\nTo use this grunt task, you’ll need to have ImageMagick installed. If you want this grunt task to be able to rasterize PDFs, you’ll need to install it with [GhostScript](http://www.ghostscript.com/) support.\n\nIf you’re using a Mac with [Homebrew](http://brew.sh/), you can install ImageMagick like this:\n\n```shell\nbrew install imagemagick --with-ghostscript\n```\n\nIf you don’t have a Mac or aren’t using Homebrew, you should be able to find ImageMagick in your favourite package manager, or [download it from the ImageMagick site](http://imagemagick.org/script/binary-releases.php).\n\n### Installing image optimizers\n\nIf you plan to use image optimization with this plugin (which I recommend you do, and which is the default), you’ll probably to install the image optimizers first. With this plugin you can use [image_optim](https://github.com/toy/image_optim), [picopt](https://github.com/ajslater/picopt), and/or [ImageOptim](https://imageoptim.com/). Unfortunately, installing them can be a bit…complicated.\n\nIf you’re not able to get these working, or if you don’t care about image optimization, you can turn optimization off by setting `optimize: false` in your Gruntfile options:\n\n```javascript\nrespimg: {\n\tnooptim: {\n\t\toptions: {\n\t\t\toptimize: false\n\t\t},\n\t\tfiles: [{\n\t\t\texpand: true,\n\t\t\tcwd: 'path/to/input',\n\t\t\tsrc: ['raster/**.{jpg,gif,png,svg,pdf}'],\n\t\t\tdest: 'path/to/output'\n\t\t}]\n\t}\n}\n```\n\nThese installation assumptions assume you’re on a Mac, but the instructions should be relatively similar for Linux systems as well. I’m not sure about Windows:\n\nFirst, [download and install pngout](http://advsys.net/ken/utils.htm). To install pngout, you’ll need to move it to somewhere in your PATH. E.g.,\n\t\n```shell\nmv ~/Downloads/pngout-20150319-darwin/pngout /usr/local/bin/\n```\n\nThen, [download and install ImageOptim](https://imageoptim.com/) (Mac only). To install ImageOptim, decompress the .tbz2 file you downloaded from the site, and drag the `ImageOptim.app` to your Applications folder.\n\nUsing your favorite package manager (e.g. Homebrew on OS X), install cairo, optipng, jpeg, and gifsicle:\n\n```shell\nbrew install cairo optipng jpeg gifsicle \n```\n\nUsing `gem` (the Ruby gem package manager), install image_optim and image_optim_pack:\n\n```shell\ngem install image_optim image_optim_pack\n```\n\nIf you get a permissions error, you may need to use `sudo`.\n\n```shell\nsudo gem install image_optim image_optim_pack\n```\n\nUsing `pip` (a Python package manager), install picopt:\n\n```shell\npip install picopt\n```\n\nIf you’re on a Mac, the Cairo install may be a bit wonky, so you may need to do this:\n\n```shell\nexport PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig\n```\n\n### Installing the plugin\n\nOnce you’ve installed the optimizers (or if you’re not going to do optimization), you may install this plugin with this command:\n\n```shell\nnpm install grunt-respimg --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-respimg');\n```\n\n\n## The “respimg” task\n\n### Overview\n\nIn your project’s Gruntfile, add a section named `respimg` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  respimg: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists go here.\n    },\n  },\n});\n```\n\n### Options you should care about\n\nThe only option you should really care about setting is `widths`:\n\n#### options.widths\n\nType: `int[]`  \nDefault value: `[ 320, 640, 1280 ]`\n\nThe widths that images should be resized to.\n\n#### options.widthAsDir\n\nType: `bool`  \nDefault value: `false`\n\nSave resized images under a directory with the same name of the width instead adding the width to the filename.\n\n#### options.optimize\n\nType: `false`, `object`\n\nWhen multiple programs are used for optimization, they are run in the following order:\n\n1. svgo\n2. image_optim\n3. picopt\n4. ImageOptim\n\nNote: `options.optimize.svg`, `options.optimize.rasterInput`, and `options.optimize.rasterOutput` are deprecated, but should still work. Please switch your syntax to use the new `optimize` options below.\n\n##### options.optimize.input\n\nType: `object`\n\n###### options.optimize.input.svgo\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times input files should be run through SVGO optimization.\n\n###### options.optimize.input.image_optim\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times input files should be run through image_optim optimization.\n\n###### options.optimize.input.imageOptim\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times input files should be run through imageOptim optimization.\n\n###### options.optimize.input.picopt\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times input files should be run through picopt optimization.\n\n##### options.optimize.output\n\nType: `object`\n\n###### options.optimize.output.svgo\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times output files should be run through SVGO optimization.\n\n###### options.optimize.output.image_optim\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times output files should be run through image_optim optimization.\n\n###### options.optimize.output.imageOptim\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times output files should be run through imageOptim optimization.\n\n###### options.optimize.output.picopt\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `0`\n\nThe number of times output files should be run through picopt optimization.\n\n### Options you probably don’t need to care about\n\nFor the most part, you should probably use the default options. They are designed to produce images that are generally visually indistinguishable from Photoshop’s *Save for Web…*, but at a smaller file size.\n\n#### options.alpha\n\nType: `String` or `null`  \nPossible values: `null`, `Activate`, `Associate`, `Background`, `Copy`, `Deactivate`, `Disassociate`, `Extract`, `Off`, `On`, `Opaque`, `Remove`, `Set`, `Shape`, `Transparent`  \nDefault value: `null`  \n\n> Gives control of the alpha/matte channel of an image.\n> – [ImageMagick: Command-line Options (alpha)](http://www.imagemagick.org/script/command-line-options.php#alpha)\n\n#### options.background\n\nType: `String` or `null`  \nPossible values: `null` or an [ImageMagick-compatible color](http://www.imagemagick.org/script/color.php)  \nDefault value: `null`  \n\n> Set the background color.\n> – [ImageMagick: Command-line Options (background)](http://www.imagemagick.org/script/command-line-options.php#background)\n\n#### options.colorspace\n\nType: `String` or `null`  \nPossible values: `null`, `CMY`, `CMYK`, `Gray`, `HCL`, `HCLp`, `HSB`, `HSI`, `HSL`, `HSV`, `HWB`, `Lab`, `LCHab`, `LCHuv`, `LMS`, `Log`, `Luv`, `OHTA`, `Rec601YCbCr`, `Rec709YCbCr`, `RGB`, `scRGB`, `sRGB`, `Transparent`, `xyY`, `XYZ`, `YCbCr`, `YCC`, `YDbDr`, `YIQ`, `YPbPr`, `YUV`  \nDefault value: `sRGB`  \n\n> Set the image colorspace.\n> – [ImageMagick: Command-line Options (colorspace)](http://www.imagemagick.org/script/command-line-options.php#colorspace)\n\n#### options.dither\n\nType: `String` or `null`  \nPossible values: `null`, `FloydSteinberg`, `None`, `plus`, `Riemersma`  \nDefault value: `None`\n\n> Apply a Riemersma or Floyd-Steinberg error diffusion dither to images when general color reduction is applied via an option, or automagically when saving to specific formats.\n> – [ImageMagick: Command-line Options (dither)](http://www.imagemagick.org/script/command-line-options.php#dither)\n\n#### options.filter\n\nType: `String` or `null`  \nPossible values: `null`, `Bartlett`, `Bessel`, `Blackman`, `Bohman`, `Box`, `Catrom`, `Cosine`, `Cubic`, `Gaussian`, `Hamming`, `Hann`, `Hanning`, `Hermite`, `Jinc`, `Kaiser`, `Lagrange`, `Lanczos`, `Lanczos2`, `Lanczos2Sharp`, `LanczosRadius`, `LanczosSharp`, `Mitchell`, `Parzen`, `Point`, `Quadratic`, `Robidoux`, `RobidouxSharp`, `Sinc`, `SincFast`, `Spline`, `Triangle`, `Welch`, `Welsh`  \nDefault value: `Triangle`  \n\n> Use this *type* of filter when resizing or distorting an image.\n> – [ImageMagick: Command-line Options (filter)](http://www.imagemagick.org/script/command-line-options.php#filter)\n\n#### options.filterSupport\n\nType: `float` or `null`  \nDefault value: `2`\n\n> Set the filter support radius. Defines how large the filter should be and thus directly defines how slow the filtered resampling process is. All filters have a default ‘prefered’ support size. Some filters like `Lagrange` and windowed filters adjust themselves depending on this value. With simple filters this value either does nothing (but slow the resampling), or will clip the filter function in a detrimental way.\n> – [ImageMagick: Command-line Options (filter)](http://www.imagemagick.org/script/command-line-options.php#filter)\n\n#### options.interlace\n\nType: `String` or `null`  \nPossible values: `null`, `GIF`, `JPEG`, `line`, `none`, `partition`, `plane`, `PNG`  \nDefault value: `Triangle`\n\n> the type of interlacing scheme.\n> – [ImageMagick: Command-line Options (interlace)](http://www.imagemagick.org/script/command-line-options.php#interlace)\n\n#### options.jpegFancyUpsampling\n\nType: `String` or `null`  \nPossible values: `null`, `off`, `on`  \nDefault value: `off`  \n\n[ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.pngCompressionFilter\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `5`  \n\n> valid values are 0 through 9. 0-4 are the corresponding PNG filters, 5 means adaptive filtering except for images with a colormap, 6 means adaptive filtering for all images, 7 means MNG \"loco\" compression, 8 means Z_RLE strategy with adaptive filtering, and 9 means Z_RLE strategy with no filtering.\n> – [ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.pngCompressionLevel\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `9`  \n\n> valid values are 0 through 9, with 0 providing the least but fastest compression and 9 usually providing the best and always the slowest.\n> – [ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.pngCompressionStrategy\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`9`  \nDefault value: `1`  \n\n> valid values are 0 through 4, meaning default, filtered, huffman_only, rle, and fixed ZLIB compression strategy. If you are using an old zlib that does not support Z_RLE (before 1.2.0) or Z_FIXED (before 1.2.2.2), values 3 and 4, respectively, will use the zlib default strategy instead.\n> – [ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.pngExcludeChunk\n\nType: `String` or `null`  \nPossible values: `null`, `all`, `date`, `none`, or the name(s) of chunk(s) to be excluded  \nDefault value: `all`  \n\n> ancillary chunks to be excluded from … PNG output.\n>\n> The *value* can be the name of a PNG chunk-type such as *bKGD*, a comma-separated list of chunk-names (which can include the word *date*, the word *all*, or the word *none*). Although PNG chunk-names are case-dependent, you can use all lowercase names if you prefer.\n>\n> – [ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.pngPreserveColormap\n\nType: `Boolean` or `null`  \nDefault value: `true`\n\n> Use the existing image->colormap. Normally the PNG encoder will try to optimize the palette, eliminating unused entries and putting the transparent colors first. If this flag is set, that behavior is suppressed.\n> – [ImageMagick: Command-line Options (define)](http://www.imagemagick.org/script/command-line-options.php#define)\n\n#### options.posterize\n\nType: `int` or `null`  \nDefault value: `136`\n\n> reduce the image to a limited number of color levels per channel.\n> – [ImageMagick: Command-line Options (posterize)](http://www.imagemagick.org/script/command-line-options.php#posterize)\n\n#### options.quality\n\nType: `int` or `null`  \nPossible values: `null`, `0`–`100`  \nDefault value: `82`\n\n> JPEG/MIFF/PNG compression level.\n> – [ImageMagick: Command-line Options (quality)](http://www.imagemagick.org/script/command-line-options.php#quality)\n\n#### options.resizeFunction\n\nType: `String` or `null`  \nPossible values: `null`, `adaptive`, `distort`, `geometry`, `interpolative`, `liquid`, `resize`, `sample`, `scale`, `thumbnail`  \nDefault value: `thumbnail`\n\n* > **-adaptive-resize** … Resize the image using data-dependent triangulation.\n> – [ImageMagick: Command-line Options (adaptive-resize)](http://www.imagemagick.org/script/command-line-options.php#adaptive-resize)\n* > **-distort** … distort an image\n> – [ImageMagick: Command-line Options (distort)](http://www.imagemagick.org/script/command-line-options.php#distort)\n* > **-geometry** … Set the preferred size and location of the image.\n> – [ImageMagick: Command-line Options (geometry)](http://www.imagemagick.org/script/command-line-options.php#geometry)\n* > **-interpolative-resize** … The \"`-interpolative-resize`\" operator is practically identical to the previous Adaptive Resize operator. However this operator will use the current \"`-interpolate`\" setting rather than a fixed 'Mesh' interpolation method.\n> – [Resize or Scaling -- IM v6 Examples (Interpolative Resize)](http://www.imagemagick.org/Usage/resize/#interpolative-resize)\n* > **-liquid-rescale** … rescale image with seam-carving.\n> – [ImageMagick: Command-line Options (liquid-rescale)](http://www.imagemagick.org/script/command-line-options.php#liquid-rescale)\n* > **-resize** … Resize an image.\n> – [ImageMagick: Command-line Options (resize)](http://www.imagemagick.org/script/command-line-options.php#resize)\n* > **-sample** … minify / magnify the image with pixel subsampling and pixel replication, respectively.\n> – [ImageMagick: Command-line Options (sample)](http://www.imagemagick.org/script/command-line-options.php#sample)\n* > **-scale** … minify / magnify the image with pixel block averaging and pixel replication, respectively.\n> – [ImageMagick: Command-line Options (scale)](http://www.imagemagick.org/script/command-line-options.php#scale)\n* > **-thumbnail** … Create a thumbnail of the image.\n> – [ImageMagick: Command-line Options (thumbnail)](http://www.imagemagick.org/script/command-line-options.php#thumbnail)\n\n#### options.strip\n\nType: `Boolean` or `null`  \nDefault value: `null`  \nNo-optim default value: `true`\n\n> strip the image of any profiles or comments.\n> – [ImageMagick: Command-line Options (strip)](http://www.imagemagick.org/script/command-line-options.php#strip)\n\n#### options.svgoPlugins\n\nType: `Object[]`  \nDefault value: `[ { removeUnknownsAndDefaults : false } ]`\n\n> …to customize SVG optimisation, you can disable/enable any SVGO plugins listed at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins).\n>\n> To disable plugins with the Gruntfile.js, look for the plugin name at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins) and copy the plugin name (minus the file extension). Then set its value in the JSON to false in comma-separated objects.\n>\n> – [grunt-svgmin readme.md](https://github.com/sindresorhus/grunt-svgmin/blob/master/readme.md)\n\n#### options.unsharp\n\nType: `object`\n\n> sharpen the image with an unsharp mask operator.\n> – [ImageMagick: Command-line Options (unsharp)](http://www.imagemagick.org/script/command-line-options.php#unsharp)\n\n##### options.unsharp.radius\n\nType: `float` or `null`  \nDefault value: `0.25`\n\n> The radius of the Gaussian, in pixels,  not counting the center\n> – [ImageMagick: Command-line Options (unsharp)](http://www.imagemagick.org/script/command-line-options.php#unsharp)\n\n##### options.unsharp.sigma\n\nType: `float` or `null`  \nDefault value: `0.08`\nNo-optim default value: `0.25`\n\n> The standard deviation of the Gaussian, in pixels\n> – [ImageMagick: Command-line Options (unsharp)](http://www.imagemagick.org/script/command-line-options.php#unsharp)\n\n##### options.unsharp.gain\n\nType: `float` or `null`  \nDefault value: `8.3`\nNo-optim default value: `8`\n\n> The fraction of the difference between the original and the blur image that is added back into the original\n> – [ImageMagick: Command-line Options (unsharp)](http://www.imagemagick.org/script/command-line-options.php#unsharp)\n\n##### options.unsharp.threshold\n\nType: `float` or `null`  \nDefault value: `0.045`  \nNo-optim default value: `0.065`\n\n> The threshold, as a fraction of *QuantumRange*, needed to apply the difference amount\n> – [ImageMagick: Command-line Options (unsharp)](http://www.imagemagick.org/script/command-line-options.php#unsharp)\n\n### Usage Examples\n\n#### Default Options\n\nIn this example, the default options are used to resize images to 320px, 640px, and 1280px wide.\n\n```js\ngrunt.initConfig({\n\trespimg: {\n\t\tdefault: {\n\t\t\tfiles: [{\n\t\t\t\texpand: true,\n\t\t\t\tcwd: 'src/img/',\n\t\t\t\tsrc: ['**.{gif,jpg,png,svg}'],\n\t\t\t\tdest: 'build/img/'\n\t\t\t}]\n\t\t}\n\t},\n});\n```\n\nIf `src/img/` contained four files — `testGif.gif`, `testJpeg.jpg`, `testPng.png`, and `testSvg.svg` — then `build/img/` would end up with 13 files:\n\n1. `testGif-w320.gif`\n2. `testGif-w640.gif`\n3. `testGif-w1280.gif`\n4. `testJpeg-w320.jpg`\n5. `testJpeg-w640.jpg`\n6. `testJpeg-w1280.jpg`\n7. `testPng-w320.png`\n8. `testPng-w640.png`\n9. `testPng-w1280.png`\n10. `testSvg.svg` (this is an *optimized* version of the original `testSvg.svg`)\n11. `testSvg-w320.png`\n12. `testSvg-w640.png`\n13. `testSvg-w1280.png`\n\n#### Custom widths\n\nYou probably don’t really want to use the default widths. You should use widths that make sense for your project.\n\n```js\ngrunt.initConfig({\n\trespimg: {\n\t\tdefault: {\n\t\t\toptions: {\n\t\t\t\twidths: [\n\t\t\t\t\t200,\n\t\t\t\t\t400\n\t\t\t\t]\n\t\t\t},\n\t\t\tfiles: [{\n\t\t\t\texpand: true,\n\t\t\t\tcwd: 'src/img/',\n\t\t\t\tsrc: ['**.{gif,jpg,png,svg}'],\n\t\t\t\tdest: 'build/img/'\n\t\t\t}]\n\t\t}\n\t},\n});\n```\n\nIf `src/img/` contained four files — `testGif.gif`, `testJpeg.jpg`, `testPng.png`, and `testSvg.svg` — then `build/img/` would end up with 9 files:\n\n1. `testGif-w200.gif`\n2. `testGif-w400.gif`\n3. `testJpeg-w200.jpg`\n4. `testJpeg-w400.jpg`\n5. `testPng-w200.png`\n6. `testPng-w400.png`\n7. `testSvg.svg` (this is an *optimized* version of the original `testSvg.svg`)\n8. `testSvg-w200.png`\n9. `testSvg-w400.png`\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### 1.1.0\n\n* PDF rasterization\n* Turn off all optimization with `optimize: false`\n* SVG bug fixes\n* README improvements\n\n### 1.0.1\n\n* Readme fixes for npm…\n\n### 1.0.0\n\n* Better, smarter defaults!\n* New image optimization options, including ones that (should) work on Linux and Windows!\n* More detailed install instructions!\n* Excitement!\n* Adventure!\n\n### 0.2.0\n\n* New option: `widthAsDir`\n* Better validation of options + unit tests\n* README improvements\n\n### 0.1.0\n\n* README changes\n* Publish with npm\n\n### 0.0.1\n\n* Initial testing release. Probably filled with with bugs.\n\n### 0.0.0\n\n* Super basic pre-0.0.1 release. Sorta working, most options ignored.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nwtn/grunt-respimg.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.1.0"
}
